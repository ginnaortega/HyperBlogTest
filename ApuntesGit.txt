GIT: Creado por Linus Torvalds
Vista-Mostrar Ocultar -Extensiones Archivos

Linea de Comandos

pwd: indica ruta donde estoy ubicado
cd: navegar a una carpeta change directory - cd/ ir al home
ls: listado de archivos de la ubicación en la que estoy
ls -al :  argumento - todos archivos incluyendo ocultos
clear : limpiar consola
ctr+l: limpiar consola
cd .. :regresa carpeta anterior - anterior.
mkdir: make directory para crear una carpeta
touch vacio.txt: crear archivo vacio.
cat vacio.txt : muestra el contenido del archivo
history : todos los comando escritos , !NumeroComando : ejecuta el comando indicado en el listado.
rm vacio.txt: elimina archivo
rm --help: explicación de cada uno de los comandos.

code : al escribir este comando abre VS Code.

COMANDOS GIT
git .add [Nombre y extensión del archivo]
git status
git rm --cached [Archivo] : Quitar de los pendientes por subir- del staged
git commit -m "Comentario"
git rm nombre_del_archivo.txt: para eliminar del repositorio
git log [Nombre Archivo]: Historial de cambios
git show [Nombre Archivo]: Todos los cambios realizados sobre el archivo.

CONFIGURAR CUENTA GIT
git conf: para ver las posibles configuraciones
git config --list : Configuración por defecto de GIT en la máquina
git config --lis --show-origin: donde estan las configuraciones guardadas.
git config --global user.name "Ginna Paola Ortega Numpaque"  : Se cambia configuración global de usuario de GIT
git config --global user.email "ginnaortega92@gmail.com" :

git reset --soft [SHA 1]: elimina los cambios hasta el staging area
git reset --mixed [SHA 1]: elimina los cambios hasta el working area
git reset --hard [SHA 1]: regresa hasta el commit del [SHA-1]
Donde el SHA-1 es el identificador del commit

git diff : permite ver las diferencias de los archivos modificados pendientes para subir.
git log --stat : permite ver el log y el detalle de los cambios realizados.

VOLVER A OTROS CAMBIOS ATRAS
git checkout + ID del commit: Permite volver a la versión del commit del archivo indicado.

Comandos para revisión y comparación en GitHub
git status: estado de archivos en el repositorio.
git log: historia entera del archivo.
git log --stat: cambios específicos en el archivo a partir de un commit.
git show: cambios históricos y específicos hechos en un archivo.
git diff “codigo de version 1” “codigo de version 2”: comparar cambios entre versiones.
git diff: comparar directorio con staging.

Comandos para corrección en GitHub
git checkout “codigo de version” “nombre del archivo”: volver a la última versión de la que se ha hecho commit.
git reset: vuelve al pasado sin posibilidad de volver al futuro, se debe usar con especificaciones.
git reset --soft: vuelve a la versión en el repositorio, pero guarda los cambios en staging. Así, podemos aplicar actualizaciones a un nuevo commit.
git reset --hard: todo vuelve a su versión anterior
git reset HEAD: saca los cambios de staging, pero no los borra. Es lo opuesto a git add.
git rm: elimina los archivos, pero no su historial. Si queremos recuperar algo, solo hay que regresar. se utiliza así:
git rm --cached elimina los archivos en staging pero los mantiene en el disco duro.
git rm --force elimina los archivos de git y del disco duro.

COMANDOS RAMAS
git branch -nombre de la rama-: Con este comando se genera una nueva rama.
git checkout -nombre de la rama-: Con este comando puedes saltar de una rama a otra.
git checkout -b rama: Genera una rama y nos mueve a ella automáticamente, Es decir, es la combinación de git branch y git checkout al mismo tiempo.
git reset id-commit: Nos lleva a cualquier commit no importa la rama, ya que identificamos el id del tag., eliminando el historial de los commit posteriores al tag seleccionado.
git checkout rama-o-id-commit: Nos lleva a cualquier commit sin borrar los commit posteriores al tag seleccionado.
git show-branch --all: Historial de todas las ramas
git branch: Permite ver las ramas creadas repositorio.

REPOSITORIO GIT HUB
git remote add origin URL: Guardar la URL del repositorio de GitHub con el nombre de origin
git remote: Verificar que la URL se haya guardado correctamente
git remote -v : Verificar que la URL se haya guardado correctamente
git pull origin master --allow-unrelated-histories: Traer la versión del repositorio remoto y hacer merge para crear un commit con los archivos de ambas partes. Podemos usar git fetch y git merge o solo git pull con el flag --allow-unrelated-histories
git push origin master:  guardar los cambios de nuestro repositorio local en GitHub:
------------------------------------------------------------------------------------------
git log --all: Muestra todo el historico
git log --all --graph --decorate --oneline: Visualiza historico de forma más visual, con los respectivos merge

TAG
alias arbolito="git log --all --graph --decorate --oneline": permite que se ejecute el comando solo con indicar el alias arbolito.

git tag -a v0-1 -m"Comentario" 0ee5a4a : Se indica un tag al comit especifico
git show-ref --tags: Permite ver los tags definidos
git tag -a nombre-del-tag id-del-commit: Crear un nuevo tag y asignarlo a un commit
git tag -d nombre-del-tag: Borrar un tag en el repositorio local
git tag o git show-ref --tags: Listar los tags de nuestro repositorio local:.
git push origin --tags: Publicar un tag en el repositorio remoto.
git tag -d nombre-del-tag y git push origin :refs/tags/nombre-del-tag: Borrar un tag del repositorio remoto.
gitk : Visual de estructura del proyecto.

------------------------------------------------------------------------------------------
Cómo generar tus llaves SSH
1. Generar tus llaves SSH**
Recuerda que es muy buena idea proteger tu llave privada con una contraseña.
ssh-keygen -t rsa -b 4096 -C "tu@email.com"
2. Terminar de configurar nuestro sistema.
En Windows y Linux: Encender el “servidor” de llaves SSH de tu computadora:
eval $(ssh-agent -s)
Añadir tu llave SSH a este “servidor”:
ssh-add ruta-donde-guardaste-tu-llave-privada
En Mac:
Encender el “servidor” de llaves SSH de tu computadora:
eval "$(ssh-agent -s)"

-----------------------------------------------
El comando git show nos muestra los cambios que han existido sobre un archivo y es muy útil para detectar cuándo se produjeron ciertos cambios, qué se rompió y cómo lo podemos solucionar. Pero podemos ser más detallados.

Si queremos ver la diferencia entre una versión y otra, no necesariamente todos los cambios desde la creación del archivo, podemos usar el comando git diff commitA commitB.

Recuerda que puedes obtener el ID de tus commits con el comando git log.
-------------------------------------------------
git rm --cached: Elimina los archivos de nuestro repositorio local y del área de staging, pero los mantiene en nuestro disco duro. Básicamente le dice a Git que deje de trackear el historial de cambios de estos archivos, por lo que pasaran a un estado untracked.
git rm --force: Elimina los archivos de Git y del disco duro. Git siempre guarda todo, por lo que podemos acceder al registro de la existencia de los archivos, de modo que podremos recuperarlos si es necesario (pero debemos usar comandos más avanzados).
git reset --soft: Borramos todo el historial y los registros de Git pero guardamos los cambios que tengamos en Staging, así podemos aplicar las últimas actualizaciones a un nuevo commit.
git reset --hard: Borra todo. Todo todito, absolutamente todo. Toda la información de los commits y del área de staging se borra del historial.
git reset HEAD: Este es el comando para sacar archivos del área de staging. No para borrarlos ni nada de eso, solo para que los últimos cambios de estos archivos no se envíen al último commit, a menos que cambiemos de opinión y los incluyamos de nuevo en staging con git add, por supuesto.

------------------------------------------------------
git checkout + ID del commit nos permite viajar en el tiempo. Podemos volver a cualquier versión anterior de un archivo específico o incluso del proyecto entero. Esta también es la forma de crear ramas y movernos entre ellas.
-------------------------------------------------------
Comandos para trabajo remoto con GIT

git clone url_del_servidor_remoto: Nos permite descargar los archivos de la última versión de la rama principal y todo el historial de cambios en la carpeta .git.
git push: Luego de hacer git add y git commit debemos ejecutar este comando para mandar los cambios al servidor remoto.
git fetch: Lo usamos para traer actualizaciones del servidor remoto y guardarlas en nuestro repositorio local (en caso de que hayan, por supuesto).
git merge: También usamos el comando git merge con servidores remotos. Lo necesitamos para combinar los últimos cambios del servidor remoto y nuestro directorio de trabajo.
git pull: Básicamente, git fetch y git merge al mismo tiempo.
--------------------------------------------------------------
Cómo se realiza un pull request
Se trabaja en una rama paralela los cambios que se desean git checkout -b <rama>.
Se hace un commit a la rama git commit -am '<Comentario>'.
Se suben al remoto los cambios git push origin <rama>.
En GitHub se hace el pull request comparando la rama master con la rama del fix.
Uno, o varios colaboradores revisan que el código sea correcto y dan feedback (en el chat del pull request).
El colaborador hace los cambios que desea en la rama y lo vuelve a subir al remoto (automáticamente jala la historia de los cambios que se hagan en la rama, en remoto).
Se aceptan los cambios en GitHub.
Se hace merge a master desde GitHub.